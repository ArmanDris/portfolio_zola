<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>Arman - JavaScript</title>
      <link>/</link>
      <description>Personal site, using Zola&#x27;s Duckquill theme.</description>
      <generator>Zola</generator>
      <language>en</language>
      <atom:link href="/tags/javascript/rss.xml" rel="self" type="application/rss+xml"/>
      <lastBuildDate>Sun, 01 Sep 2024 00:00:00 +0000</lastBuildDate>
      <item>
          <title>Resume Builder</title>
          <pubDate>Sun, 01 Sep 2024 00:00:00 +0000</pubDate>
          <author>Arman Drismir</author>
          <link>/work/resume-builder/</link>
          <guid>/work/resume-builder/</guid>
          <description xml:base="/work/resume-builder/">&lt;p&gt;I designed a resume builder so that our users can easily create resumes using Jake’s Template. It also comes with some options to generate sections of your Resume with Chat GPT. Generating highlights using the Chat GPT wrapper makes resume building super fast.
&lt;img src=&quot;&#x2F;work&#x2F;resume-builder&#x2F;ResumeBuilder.png&quot; alt=&quot;Preview of the Resume Builder I made&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Pretty much all of development revolved around the Resume type definition:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;export interface Resume {
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    resume_id: string;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    label: string; &#x2F;&#x2F; Shown to the user to identify resume
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    full_name: string;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    phone_number: string;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    email: string;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    personal_website: string;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    linkedin: string;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    github: string;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    education: EducationSection[];
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    experience: ExperienceSection[];
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    projects: ProjectsSection[];
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    technical_skills: SkillsSection[];
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;wrestling-with-state-updates&quot;&gt;Wrestling with State Updates:&lt;&#x2F;h2&gt;
&lt;p&gt;Each of these attributes are their own state in the resume builder, so to update an attribute of any index in &lt;code&gt;EducationSection[]&lt;&#x2F;code&gt; we need to create a new section with the updates value and also a new array with the updated index. If we take for example, updating a single highlight within an project section, the code looks like this:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;onChange={(e) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    let new_highlights: string[] = [...prj.highlights];
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    new_highlights[hi_index] = e.target.value;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    const new_prj: ProjectsSection = { ...prj, highlights: new_highlights, };
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    const new_prjs: ProjectsSection[] = [...projects];
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    new_prjs[index] = new_prj;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    setProjects(new_prjs);
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This logic cannot be trivially put inside a helper function for all the sections to use since TypeScript complains that since the sections have different fields its illegal to allow the helper function to operate on the setter function. Getting around this would require a typescript type hack or adding inheritance in my data types.&lt;&#x2F;p&gt;
&lt;p&gt;I decided that the added complexity and separation of related code would do more harm than good and stuck with the simple solution.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;syncing-the-resume&quot;&gt;Syncing the Resume:&lt;&#x2F;h2&gt;
&lt;p&gt;With a clearly defined type for each resume, syncing to Supabase is very easy. I just made a table with each property and then I can directly upload my Resume variables to Supabase. Since each property has its own state we can also auto save on every chance win a single &lt;code&gt;useEffect&lt;&#x2F;code&gt;. Since I thought naming conflicts would be a nightmare to deal with, especially if I risk overwriting another Resume, I added a uuid for each resume. I did not know that it was acceptable to create uuid’s without checking that no other matching ones exist. It is a very nice system though since it makes creating resumes while offline possible.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;overall&quot;&gt;Overall:&lt;&#x2F;h2&gt;
&lt;p&gt;I am very happy I decided to clearly define my data first, then build my components around my data. The type definitions I came up with made the overall structure very simple and the details harder. Which is much better than the other way around.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>gpt-broker</title>
          <pubDate>Sat, 31 Aug 2024 00:00:00 +0000</pubDate>
          <author>Arman Drismir</author>
          <link>/work/gpt-broker/</link>
          <guid>/work/gpt-broker/</guid>
          <description xml:base="/work/gpt-broker/">&lt;p&gt;SkillSync uses a lot of OpenAI API chat completions. We needed to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Keep API keys out of client side code&lt;&#x2F;li&gt;
&lt;li&gt;Secure our ChatGPT endpoints to prevent someone from running up our bill maliciously 😵&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To keep development with OpenAI as frictionless as possible I developed gpt-broker. The idea is that gpt-broker takes an access_token and a prompt and handles everything else under the hood.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-it-works&quot;&gt;How it works:&lt;&#x2F;h3&gt;
&lt;p&gt;A call to gpt-broker’s API looks like this:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;POST &#x2F;advanced-gpt-4o-mini-complete
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Authorization: Bearer &amp;lt;access_token&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    { role: &amp;#39;system&amp;#39;, content: &amp;quot;Write me a poem&amp;quot; },
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    ...
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;gpt-broker processes the quest like this:
&lt;img src=&quot;&#x2F;work&#x2F;gpt-broker&#x2F;gpt-broker-process.png&quot; alt=&quot;graph of how gpt-broker handles a request&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;why-use-redis&quot;&gt;Why use Redis?&lt;&#x2F;h3&gt;
&lt;p&gt;It might seem weird that we use Redis to track usage since Supabase is a database and we need to validate the access token with them anyway. At first I did use supabase to track usage but I found out I was wasting a lot of time waiting for the request to move to&#x2F;from supabase. With Redis we can run the cache locally and have almost no latency.&lt;&#x2F;p&gt;
&lt;p&gt;Here is a breakdown of the time taken for a request with supabase&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Validate User:    174ms
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Check Rate Limit: 234ms (update Supabase DB)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;GPT:              677ms
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;---------------------------
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Total:            1085ms
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And this is with a local Redis cache:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;ValidateUser:   174ms
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;CheckRateLimit: 4ms     (update local Redis cache)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;GPT:            677ms
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;-------------------------
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Total:          855ms
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We save 230ms! Which is small for a human but still noticeable.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>AgroBot Website</title>
          <pubDate>Thu, 22 Aug 2024 00:00:00 +0000</pubDate>
          <author>Arman Drismir</author>
          <link>/work/agrobot-website/</link>
          <guid>/work/agrobot-website/</guid>
          <description xml:base="/work/agrobot-website/">&lt;p&gt;After eight busy months the WebDev team finally finished the UBC AgroBot website!
&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ubcagrobot.com&quot;&gt;ubcagrobot.com&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The coolest part of the website is the 3d models of the robots we are buildings. You can even drag them around!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;work&#x2F;agrobot-website&#x2F;3d_model.png&quot; alt=&quot;3d model of agrobot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;My favorite component is the recruitment timeline I made. I learned about some awful JavaScript Date related properties while making this.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;work&#x2F;agrobot-website&#x2F;timeline.png&quot; alt=&quot;UBC Agrobot recruitment timeline&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We still need to come up with an actual hosting solution and we need to develop something the marketing team can use to publish new articles. Overall I am very happy with how the website turned out, it feels good to finally publish 😮‍💨.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Autofiller</title>
          <pubDate>Sat, 20 Jul 2024 00:00:00 +0000</pubDate>
          <author>Arman Drismir</author>
          <link>/drafts/autofiller/</link>
          <guid>/drafts/autofiller/</guid>
          <description xml:base="/drafts/autofiller/">&lt;p&gt;…&lt;&#x2F;p&gt;
</description>
      </item>
    </channel>
</rss>
